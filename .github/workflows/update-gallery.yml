      - name: Generate images.json with dates
        run: |
          node -e "
            const fs = require('fs');
            const { execSync } = require('child_process');

            console.log('Starting script...');

            function getFileCreationDate(path) {
              try {
                const log = execSync(\`git log --follow --format=%aI -- \${path} | tail -1\`).toString().trim();
                return log || new Date().toISOString();
              } catch (error) {
                console.error('Error fetching commit date for', path, error.message);
                return new Date().toISOString();
              }
            }

            (async () => {
              try {
                console.log('Reading files...');
                const files = fs.readdirSync('.')
                  .filter(f => /\.(gif|png|jpg)$/i.test(f))
                  .map(f => ({
                    url: 'https://raw.githubusercontent.com/Endermanik13/PokkiSite/main/' + f,
                    name: f
                  }));

                console.log('Files found:', files);

                if (files.length === 0) {
                  console.log('No image files found, creating empty images.json');
                  fs.writeFileSync('images.json', JSON.stringify([], null, 2));
                  return;
                }

                const filesWithDates = [];
                for (const file of files) {
                  console.log('Processing file:', file.name);
                  const date = getFileCreationDate(file.name);
                  filesWithDates.push({
                    url: file.url,
                    date: date
                  });
                }

                console.log('Sorting files by date...');
                filesWithDates.sort((a, b) => new Date(b.date) - new Date(a.date));

                console.log('Writing to images.json:', filesWithDates);
                fs.writeFileSync('images.json', JSON.stringify(filesWithDates, null, 2));
              } catch (error) {
                console.error('Error in script:', error.message);
                process.exit(1);
              }
            })();
          "
